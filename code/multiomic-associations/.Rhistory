getwd()
X3 <-  read.csv('../../results/mediation/diablo-setup/clinical.csv',row.names=1) #%>% as.matrix
X3
X3[1:2,]
getwd()
library(tidyverse)
library(mixOmics)
library(igraph)
X1 <- read.csv('../../results/mediation/diablo-setup/microbes.csv', row.names=1)# %>% as.matrix
X2 <-  read.csv('../../results/mediation/diablo-setup/luminex.csv',row.names=1) #%>% as.matrix
X3 <-  read.csv('../../results/mediation/diablo-setup/clinical.csv',row.names=1) #%>% as.matrix
drops <- c('Education')
X3 <- X3[ , !(names(X3) %in% drops)]
Y_pec <-  read.csv('../../results/mediation/diablo-setup/metadata.csv', row.names=1) %>%
mutate(PEC_case=PEC_case=='True')
row.names(X1)=row.names(X2)
row.names(X3)=row.names(X2)
row.names(Y_pec)=row.names(X2)
# X1 <- X1[, 1:100]
group_list <- list(row.names(Y_pec),
which(Y_pec$BMI>=25),
which(Y_pec$BMI<25)
)
save_dir_group <- c('all-cohort',
'bmi-greater25',
'bmi-less25'
for(i in 1:3){
set.seed(123)
inds <- group_list[[i]]
X <- list(micro = X1[inds,] %>% as.matrix,
luminex = X2[inds,] %>% as.matrix,
clinical=X3[inds,] %>% as.matrix
)
Y <- Y_pec[inds,]$PEC_case
# for square matrix filled with 0.1s
design = matrix(0.1,
ncol = length(X),
nrow = length(X),
dimnames = list(names(X),
names(X))
)
diag(design) = 0 # set diagonal to 0s
basic.diablo.model = block.splsda(X = X,
Y = Y,
ncomp = 5,
design = design)
# run component number tuning with repeated CV
perf.diablo = perf(basic.diablo.model,
validation = 'Mfold',
folds = 10,
nrepeat = 10 )
# plot(perf.diablo) # plot output of tuning
ncomp = perf.diablo$choice.ncomp$WeightedVote["Overall.BER", "centroids.dist"]
test.keepX = list (micro = c(2,5,10),
luminex = c(2,5,10),
clinical = c(2,5,10)
)
# run the feature selection tuning
tune.TCGA = tune.block.splsda(X = X,
Y = Y,
ncomp = ncomp,
test.keepX = test.keepX,
design = design,
validation = 'Mfold',
folds = 5,
nrepeat = 1,
dist = "centroids.dist"
)
list.keepX = tune.TCGA$choice.keepX
# set the optimised DIABLO model
final.diablo.model = block.splsda(X = X,
Y = Y,
ncomp = ncomp,
keepX = list.keepX,
design = design
)
plotDiablo(final.diablo.model, ncomp = 1)
plotLoadings(final.diablo.model,
block=c(1,2,3),
comp = 1,
col.ties='grey',
contrib = 'max',
method = 'median',
# xlim=c(-0.5, 1)
)
1+'k'
dev.print(pdf,
file=paste0("../../results/mediation/",
save_dir_group[i],
"/diablo-loadings.pdf")
)
# save='pdf',
# name.save=paste0("../../results/mediation/",
#                  save_dir_group[i],
#                  "/diablo-loadings")
# )
# ggsave(paste0("../../results/mediation/",
#               save_dir_group[i],
#               "/diablo-loadings.pdf"))
#
# pdf(file=paste0("../../results/mediation/",
#                 save_dir_group[i],
#                 "/diablo-loadings.pdf"))
#
# ?pdf
#
# ?plotLoadings
# #
# auroc(final.diablo.model,
#       roc.block = "micro",
#       roc.comp = 1,
#       print = FALSE
#       )
# circosPlot(final.diablo.model,
#            # cutoff = 0.5,
#            cutoff = 0.5,
#            line = TRUE,
#            color.blocks= c('darkorchid', 'brown1', 'lightgreen'),
#            color.cor = c("chocolate3","grey20"),
#            size.labels = 1.5,
#            size.variables = 1,
#            linkWidth=3,
#            )
set.seed(123)
q <- network(final.diablo.model,
blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
# cutoff = 0.7,
cutoff = 0.5,
lwd.edge = 10,
block.var.names=F,
# alpha.node=0.005,
# keysize.label = 0.000001,
# cex.edge.label = 0.1,
alpha.node=c(0.5),#, 0.5, 0.5),
# shape.node= c('circle', 'circle', 'circle'),
cex.node.name=0.00001,
save='pdf',
# breaks = c(-1, -0.5, 0, 0.5, 1),
# name.save=paste0("../../results/mediation/",
#                  save_dir_group[i],
#                  "/diablo-network-no-text")
)
q$gR %>%
as_long_data_frame() %>%
write.csv(
paste0("../../results/mediation/",
save_dir_group[i],
"/diablo-graph.csv")
)
set.seed(123)
network(final.diablo.model,
blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
# cutoff = 0.7,
cutoff = 0.5,
lwd.edge = 10,
# block.var.names=F,
# alpha.node=0.005,
# keysize.label = 0.2,
# cex.edge.label = 0.1,
# breaks = c(-1, 0, 1),
alpha.node=c(0.5),#, 0.5, 0.5),
# shape.node = c('circle', 'circle', 'circle'),
# cex.node.name=5,
# shape.node=c('circle', 'circle', 'circle'),
# comp=list(1,2,3)
# )
save='pdf',
name.save=paste0("../../results/mediation/",
save_dir_group[i],
"/diablo-network")
)
}
for(i in 1:3){
set.seed(123)
inds <- group_list[[i]]
X <- list(micro = X1[inds,] %>% as.matrix,
luminex = X2[inds,] %>% as.matrix,
clinical=X3[inds,] %>% as.matrix
)
Y <- Y_pec[inds,]$PEC_case
# for square matrix filled with 0.1s
design = matrix(0.1,
ncol = length(X),
nrow = length(X),
dimnames = list(names(X),
names(X))
)
diag(design) = 0 # set diagonal to 0s
basic.diablo.model = block.splsda(X = X,
Y = Y,
ncomp = 5,
design = design)
# run component number tuning with repeated CV
perf.diablo = perf(basic.diablo.model,
validation = 'Mfold',
folds = 10,
nrepeat = 10 )
# plot(perf.diablo) # plot output of tuning
ncomp = perf.diablo$choice.ncomp$WeightedVote["Overall.BER", "centroids.dist"]
test.keepX = list (micro = c(2,5,10),
luminex = c(2,5,10),
clinical = c(2,5,10)
)
# run the feature selection tuning
tune.TCGA = tune.block.splsda(X = X,
Y = Y,
ncomp = ncomp,
test.keepX = test.keepX,
design = design,
validation = 'Mfold',
folds = 5,
nrepeat = 1,
dist = "centroids.dist"
)
list.keepX = tune.TCGA$choice.keepX
# set the optimised DIABLO model
final.diablo.model = block.splsda(X = X,
Y = Y,
ncomp = ncomp,
keepX = list.keepX,
design = design
)
plotDiablo(final.diablo.model, ncomp = 1)
plotLoadings(final.diablo.model,
block=c(1,2,3),
comp = 1,
col.ties='grey',
contrib = 'max',
method = 'median',
# xlim=c(-0.5, 1)
)
dev.print(pdf,
file=paste0("../../results/mediation/",
save_dir_group[i],
"/diablo-loadings.pdf")
)
# save='pdf',
# name.save=paste0("../../results/mediation/",
#                  save_dir_group[i],
#                  "/diablo-loadings")
# )
# ggsave(paste0("../../results/mediation/",
#               save_dir_group[i],
#               "/diablo-loadings.pdf"))
#
# pdf(file=paste0("../../results/mediation/",
#                 save_dir_group[i],
#                 "/diablo-loadings.pdf"))
#
# ?pdf
#
# ?plotLoadings
# #
# auroc(final.diablo.model,
#       roc.block = "micro",
#       roc.comp = 1,
#       print = FALSE
#       )
# circosPlot(final.diablo.model,
#            # cutoff = 0.5,
#            cutoff = 0.5,
#            line = TRUE,
#            color.blocks= c('darkorchid', 'brown1', 'lightgreen'),
#            color.cor = c("chocolate3","grey20"),
#            size.labels = 1.5,
#            size.variables = 1,
#            linkWidth=3,
#            )
set.seed(123)
q <- network(final.diablo.model,
blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
# cutoff = 0.7,
cutoff = 0.5,
lwd.edge = 10,
block.var.names=F,
# alpha.node=0.005,
# keysize.label = 0.000001,
# cex.edge.label = 0.1,
alpha.node=c(0.5),#, 0.5, 0.5),
# shape.node= c('circle', 'circle', 'circle'),
cex.node.name=0.00001,
save='pdf',
# breaks = c(-1, -0.5, 0, 0.5, 1),
# name.save=paste0("../../results/mediation/",
#                  save_dir_group[i],
#                  "/diablo-network-no-text")
)
q$gR %>%
as_long_data_frame() %>%
write.csv(
paste0("../../results/mediation/",
save_dir_group[i],
"/diablo-graph.csv")
)
set.seed(123)
network(final.diablo.model,
blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
# cutoff = 0.7,
cutoff = 0.5,
lwd.edge = 10,
# block.var.names=F,
# alpha.node=0.005,
# keysize.label = 0.2,
# cex.edge.label = 0.1,
# breaks = c(-1, 0, 1),
alpha.node=c(0.5),#, 0.5, 0.5),
# shape.node = c('circle', 'circle', 'circle'),
# cex.node.name=5,
# shape.node=c('circle', 'circle', 'circle'),
# comp=list(1,2,3)
# )
save='pdf',
name.save=paste0("../../results/mediation/",
save_dir_group[i],
"/diablo-network")
)
}
final.diablo.model
final.diablo.model$ind.mat
final.diablo.model$loadings$micro
final.diablo.model$AVE
final.diablo.model$Y
final.diablo.model$variates
final.diablo.model$variates$micro
final.diablo.model$prop_expl_var
final.diablo.model$weights
final.diablo.model$crit
final.diablo.model$keepX
final.diablo.model$keepY
final.diablo.model$variates
final.diablo.model$loadings
final.diablo.model$init
check = check.input.plotLoadings(object = final.diablo.model )
mixOmics::check.input.plotLoadings
get.contrib.df(Y = final.diablo.model$Y, X = final.diablo.model$X)
mixOmics::get.contrib.df(Y = final.diablo.model$Y, X = final.diablo.model$X)
get.contrib.df <- function(Y,
X,
method,
contrib,
value.selected.var,
colnames.X,
name.selected.var,
legend.color,
col.ties)
{
# Start: Initialisation
which.comp = method.group = list()
which.contrib = data.frame(matrix(FALSE, ncol = nlevels(Y) + 2, nrow = length(colnames.X),
dimnames = list(name.selected.var, c(paste0("Contrib.", levels(Y)), "Contrib", "GroupContrib"))))
# End: Initialisation
# calculate the max.method per group for each variable, and identifies which group has the max max.method
for(k in 1:ncol(X))
{
method.group[[k]] = tapply(X[, k], Y, method, na.rm=TRUE) #method is either mean or median
# determine which group has the highest mean/median
which.contrib[k, 1:nlevels(Y)] = (method.group[[k]]) == get(contrib)((method.group[[k]]), na.rm=TRUE) # contrib is either min or max
}
# we also add an output column indicating the group that is max
# if ties, we set the color to white
which.contrib$color = apply(which.contrib, 1, function(x)
{
if (length(which(x)) > 1)
{
return(col.ties)
} else { # otherwise we use legend color provided
return(legend.color[1 : nlevels(Y)][which(x)])
}
})
which.contrib$GroupContrib = apply(which.contrib[, 1:(nlevels(Y))], 1, function(x)
{
if (length(which(x)) > 1)
{
return("tie")
} else {
return(levels(Y)[which(x)])
}
})
method.group = do.call(rbind, method.group)
df = data.frame(method.group, which.contrib, importance = value.selected.var)
return(df)
}
get.contrib.df(Y = final.diablo.model$Y, X = final.diablo.model$X)
?get.loadings.ndisplay
Y
final.diablo.model$
get.contrib.df(Y = final.diablo.model$Y, X = final.diablo.model$X, method='mean', contrib='max', colnames.X=NULL, names.selected.var=NULL )
get.contrib.df <- function(Y,
X,
method,
contrib,
value.selected.var,
colnames.X,
name.selected.var,
legend.color,
col.ties)
{
# Start: Initialisation
which.comp = method.group = list()
which.contrib = data.frame(matrix(FALSE, ncol = nlevels(Y) + 2, nrow = length(colnames.X),
dimnames = list(name.selected.var, c(paste0("Contrib.", levels(Y)), "Contrib", "GroupContrib"))))
# End: Initialisation
# calculate the max.method per group for each variable, and identifies which group has the max max.method
for(k in 1:ncol(X))
{
method.group[[k]] = tapply(X[, k], Y, method, na.rm=TRUE) #method is either mean or median
# determine which group has the highest mean/median
which.contrib[k, 1:nlevels(Y)] = (method.group[[k]]) == get(contrib)((method.group[[k]]), na.rm=TRUE) # contrib is either min or max
}
# we also add an output column indicating the group that is max
# if ties, we set the color to white
which.contrib$color = apply(which.contrib, 1, function(x)
{
if (length(which(x)) > 1)
{
return(col.ties)
} else { # otherwise we use legend color provided
return(legend.color[1 : nlevels(Y)][which(x)])
}
})
which.contrib$GroupContrib = apply(which.contrib[, 1:(nlevels(Y))], 1, function(x)
{
if (length(which(x)) > 1)
{
return("tie")
} else {
return(levels(Y)[which(x)])
}
})
method.group = do.call(rbind, method.group)
df = data.frame(method.group, which.contrib, importance = value.selected.var)
return(df)
}
final.diablo.model$
get.contrib.df(Y = final.diablo.model$Y, X = final.diablo.model$X, method='mean', contrib='max', colnames.X=NA, names.selected.var=NA )
plotDiablo(final.diablo.model, ncomp = 1)
X1[1:5, 1:5]
getwd()
colnames(X3)
save_dir_group <- c('all-cohort',
'bmi-greater25',
'bmi-less25'
)
row.names(Y_pec)=row.names(X2)
source("~/Desktop/New-vaginal-project/numom_preeclampsia/code/mediation/02-run-diablo.R", echo=TRUE)
drops <- c('Education'#, 'V1AF14'
)
X3 <- X3[ , !(names(X3) %in% drops)]
source("~/Desktop/New-vaginal-project/numom_preeclampsia/code/mediation/02-run-diablo.R", echo=TRUE)
